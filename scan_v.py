import os
import subprocess
from multiprocessing import Pool


def available_cpu_cores(desired_cores=None):
    total_cores = cpu_count()
    if desired_cores is None or int(desired_cores) > total_cores:
        return total_cores
    return desired_cores

def ping_ip(ip):
    result = os.system(f"ping -c 1 -W 1 {ip} &>/dev/null")
    if result == 0:
        return ip
    return None

def search_exploits(ip):
    # Run searchsploit for the given IP address
    try:
        result = subprocess.check_output(["searchsploit", ip])
        return result.decode("utf-8")
    except subprocess.CalledProcessError:
        return f"No exploits found for {ip}"

def scan_network():
    def scan():
        found_devices = []
        available_interfaces = os.listdir('/sys/class/net')
        for interface in available_interfaces:
            network_prefix = os.popen(f"ip -o -4 addr show dev {interface} | awk '/inet / {{print $4}}' | cut -d'.' -f1-3").read().strip()
            ips_to_scan = [f"{network_prefix}.{i}" for i in range(1, 255)]
            with Pool(processes=available_cpu_cores()) as pool:
                results = pool.map(ping_ip, ips_to_scan)
                found_devices.extend(filter(None, results))
        # Search for exploits for each found IP address
        exploits_results = []
        for ip in found_devices:
            exploit_result = search_exploits(ip)
            exploits_results.append(exploit_result)
        return found_devices, exploits_results
    return scan()

output_file_path = "network_scan_results.txt"

# Redirect print statements to the file
with open(output_file_path, "w") as output_file:
    print("Devices on the network:", file=output_file)
    devices, exploits = scan_network()
    print("Devices on the network:", file=output_file)
    for device, exploit in zip(devices, exploits):
        print(f"Device: {device}", file=output_file)
        print(f"Exploits: {exploit}", file=output_file)
        print("=" * 30, file=output_file)

print(f"Results saved to {output_file_path}")
